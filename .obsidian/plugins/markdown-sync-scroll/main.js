/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkdownSyncScrollPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MarkdownViewScrollOffset = Symbol("MarkdownViewScrollOffset");
var MarkdownViewScrollGroup = Symbol("MarkdownViewScrollGroup");
var MarkdownSyncScrollPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.originalSyncState = import_obsidian.MarkdownView.prototype.syncState;
    import_obsidian.MarkdownView.prototype.getScrollOffsetForSync = function(group) {
      let scrollOffset = this[MarkdownViewScrollOffset];
      if (group !== this[MarkdownViewScrollGroup]) {
        scrollOffset = void 0;
      }
      if (scrollOffset === void 0) {
        const currentScroll = this.currentMode.getScroll();
        this[MarkdownViewScrollOffset] = currentScroll;
        this[MarkdownViewScrollGroup] = group;
        return currentScroll;
      }
      return scrollOffset;
    };
    import_obsidian.MarkdownView.prototype.syncState = async function(sameType) {
      const leaf = this.leaf;
      const group = leaf.group;
      if (!group)
        return false;
      const syncViewState = this.getSyncViewState();
      const currentScroll = this.currentMode.getScroll();
      const srcScrollOffset = this.getScrollOffsetForSync(group);
      let success = true;
      for (const groupLeaf of leaf.workspace.getGroupLeaves(group)) {
        if (groupLeaf === leaf)
          continue;
        const isSameType = groupLeaf.view.getViewType() === this.getViewType();
        if (!sameType || isSameType) {
          if (groupLeaf.working) {
            success = false;
            continue;
          }
          const destView = groupLeaf.view;
          if (destView instanceof import_obsidian.MarkdownView) {
            const destScrollOffset = destView.getScrollOffsetForSync(group);
            destView.currentMode.applyScroll(currentScroll - srcScrollOffset + destScrollOffset);
          } else {
            await groupLeaf.openFile(this.file, syncViewState);
          }
        }
      }
      return success;
    };
  }
  onunload() {
    import_obsidian.MarkdownView.prototype.syncState = this.originalSyncState;
  }
};
